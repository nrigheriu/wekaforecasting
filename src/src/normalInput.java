package src;

import java.io.*;
import java.util.HashMap;

import weka.classifiers.functions.*;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.core.Instances;

public class normalInput {
    public static void main(String[] args) {
        try {
            String pathToWholeData = "dataSets/1year3months_allaggregate_extraFeatures.arff";
            //String pathToHugeData = "/home/cycle/workspace/wekaforecasting-new-features/dataSets/6months_1aggregate_extraFeatures.arff";

            // load the data
            Instances wholeData  = new Instances(new BufferedReader(new FileReader(pathToWholeData)));
            //Instances hugeData = new Instances(new BufferedReader((new FileReader(pathToHugeData))));

            wholeData.setClassIndex(1);
            System.out.println("Data:" + pathToWholeData);
            HashMap<String, String> lagsHashMap = new HashMap<>();
            lagsHashMap.put("dataSets/1year3months_1aggregate1_extraFeatures.arff", "1, 872, 873, 871, 964, 1340, 1233, 1251, 1248, 1337, 1341, 1338, 1344, 1343, 1145, 768, 1144, 672, 1146, 1056, 1147, 1055, 673, 1037, 769, 671, 572, 573, 1143, 2, 1140, 181, 767, 765, 484, 948, 576, 575, 377, 192, 96, 1232, 191, 770, 965, 569, 571, 97, 3, 480, 479, 771, 95, 465, 1036, 1161, 947, 1231, 376, 945, 1229, 378, 288, 476, 379, 287, 286, 966, 1035, 967, 1033, 681, 1162, 375, 1163, 373, 180, 1269, 1073, 877, 682, 840, 1270, 1271, 683, 1074, 179, 1075, 878, 839, 178, 879, 838, 109, 268, 1377, 644, 1378, 1379, 267, 501, 305, 266, 643, 110, 642, 72, 697, 111, 502, 503, 732, 71, 698, 306, 70, 448, 307, 447, 446, 217, 252, 218");
            lagsHashMap.put("dataSets/1year3months_1aggregate2_extraFeatures.arff", "1, 2, 3, 1056, 1055, 1057, 1340, 964, 864, 1337, 1335, 1248, 963, 867, 1232, 865, 960, 1249, 484, 1247, 480, 1231, 481, 1230, 1343, 1341, 377, 378, 384, 1342, 1145, 768, 1147, 96, 1146, 479, 671, 573, 97, 672, 680, 575, 681, 574, 95, 682, 767, 769, 683, 766, 1144, 948, 288, 192, 193, 572, 287, 770, 194, 965, 1143, 291, 771, 571, 966, 947, 1142, 945, 967, 1161, 180, 570, 1162, 1163, 179, 1036, 178, 109, 1269, 1035, 1073, 376, 1074, 1075, 1034, 110, 1270, 1271, 375, 877, 111, 878, 374, 697, 879, 305, 698, 699, 306, 72, 307, 501, 644, 71, 268, 840, 267, 502, 839, 503, 70, 643, 266, 642, 838, 217, 218, 219, 1383, 1377, 1379, 414, 413, 415");
            lagsHashMap.put("dataSets/1year3months_1aggregate3_extraFeatures.arff", "1, 1040, 1041, 1042, 1147, 2, 1146, 1145, 1237, 1238, 1235, 1345, 1344, 572, 1341, 3, 701, 541, 571, 702, 697, 967, 965, 1075, 966, 1076, 1165, 1074, 768, 1161, 1166, 1144, 1271, 1274, 1273, 680, 1004, 767, 1036, 575, 574, 1143, 681, 672, 673, 573, 1142, 769, 773, 1005, 682, 1340, 772, 683, 964, 764, 963, 962, 1339, 613, 612, 1338, 611, 1232, 96, 91, 877, 95, 878, 879, 1231, 1230, 377, 876, 181, 378, 192, 948, 182, 381, 875, 864, 109, 947, 305, 484, 475, 308, 483, 481, 480, 309, 285, 110, 284, 946, 286, 111, 840, 376, 180, 375, 839, 374, 179, 178, 807, 268, 72, 1380, 1381, 267, 1377, 217, 501, 266, 71, 222, 218, 70, 502, 503, 413, 414, 415");
            lagsHashMap.put("dataSets/1year3months_1aggregate4_extraFeatures.arff", "875, 874, 870, 1048, 1071, 1054, 679, 677, 1, 678, 1341, 1342, 1343, 1152, 1156, 1154, 1244, 1248, 1249, 1339, 1340, 963, 1338, 962, 961, 1269, 1270, 1271, 1161, 768, 1073, 1143, 1142, 1162, 1144, 767, 1231, 769, 1230, 965, 766, 1163, 1232, 1074, 574, 573, 575, 482, 770, 966, 2, 481, 1075, 483, 967, 771, 947, 877, 948, 946, 3, 1035, 572, 571, 1034, 1377, 570, 1036, 878, 480, 1378, 879, 1379, 479, 681, 288, 384, 385, 383, 287, 682, 289, 96, 683, 192, 95, 97, 839, 193, 191, 697, 376, 838, 698, 840, 375, 699, 374, 501, 305, 643, 642, 644, 502, 503, 306, 180, 307, 179, 268, 178, 267, 109, 266, 447, 448, 446, 110, 111, 217, 218, 72, 219, 71, 70");
            lagsHashMap.put("dataSets/1year3months_1aggregate5_extraFeatures.arff", "768, 1340, 1, 1338, 1339, 766, 767, 1345, 1344, 1341, 1237, 672, 673, 1236, 962, 964, 961, 671, 1233, 844, 1041, 1040, 845, 864, 1045, 572, 1148, 1149, 1145, 769, 1144, 484, 571, 772, 570, 481, 479, 771, 1232, 1143, 1139, 1230, 1231, 573, 965, 576, 96, 968, 577, 95, 2, 948, 94, 969, 946, 189, 191, 190, 1161, 947, 1164, 465, 480, 6, 1163, 376, 287, 288, 286, 380, 377, 381, 1036, 877, 681, 1034, 1035, 180, 375, 880, 881, 840, 374, 1073, 1076, 684, 838, 1077, 839, 685, 1272, 1269, 179, 1273, 178, 730, 731, 732, 1381, 1380, 268, 1392, 109, 267, 644, 643, 266, 72, 642, 111, 110, 71, 70, 305, 308, 448, 447, 501, 309, 446, 504, 503, 252, 251, 250");
            lagsHashMap.put("dataSets/1year3months_1aggregate6_extraFeatures.arff", "760, 768, 763, 1343, 1342, 1, 1344, 769, 770, 771, 672, 1245, 1147, 1236, 1248, 1150, 1148, 671, 674, 2, 573, 576, 574, 3, 478, 481, 465, 1340, 1339, 1338, 192, 181, 965, 966, 1054, 1055, 1056, 191, 288, 864, 1232, 967, 290, 948, 947, 287, 379, 1230, 863, 384, 1231, 378, 865, 878, 960, 1144, 877, 1036, 946, 959, 96, 1032, 964, 1035, 879, 1143, 840, 1161, 1162, 1142, 572, 1163, 95, 681, 839, 682, 571, 832, 94, 570, 683, 1270, 1293, 480, 1269, 180, 479, 483, 179, 376, 1073, 109, 178, 1074, 1387, 375, 1391, 1389, 110, 1075, 374, 268, 111, 267, 72, 266, 731, 724, 644, 732, 71, 643, 639, 70, 252, 536, 535, 250, 244, 534, 305, 448, 306, 447, 307, 445");
            lagsHashMap.put("dataSets/1year3months_1aggregate7_extraFeatures.arff", "1, 484, 483, 482, 1234, 1233, 1267, 966, 965, 1071, 1072, 967, 1053, 1036, 2, 862, 861, 1035, 859, 1162, 1161, 574, 1341, 1269, 1163, 1270, 573, 1034, 1342, 575, 1272, 1343, 680, 679, 465, 476, 666, 473, 1232, 1340, 1231, 1378, 1377, 1339, 1230, 1380, 3, 1146, 1147, 1145, 1073, 681, 769, 1144, 1074, 1338, 877, 768, 770, 195, 1075, 964, 771, 682, 1143, 963, 190, 189, 683, 767, 878, 380, 382, 377, 766, 961, 879, 1142, 288, 289, 287, 572, 571, 570, 948, 947, 697, 698, 96, 699, 946, 97, 95, 840, 839, 643, 644, 376, 641, 838, 375, 374, 501, 502, 503, 268, 180, 267, 179, 266, 178, 305, 109, 306, 110, 307, 413, 414, 111, 448, 72, 217, 71, 218, 70, 220");
            lagsHashMap.put("dataSets/1year3months_1aggregate8_extraFeatures.arff", "1, 2, 1341, 863, 861, 860, 1343, 1342, 1340, 768, 769, 672, 673, 671, 1248, 3, 1247, 1246, 1339, 767, 1161, 1145, 573, 770, 766, 1338, 1152, 1149, 771, 1036, 948, 1162, 697, 576, 1073, 1144, 1035, 574, 947, 698, 377, 1056, 384, 1034, 1163, 946, 383, 1074, 960, 478, 699, 1055, 959, 1269, 572, 1054, 191, 1143, 192, 961, 1270, 1075, 190, 681, 1271, 1142, 95, 479, 480, 96, 94, 571, 484, 682, 287, 286, 285, 570, 965, 840, 683, 839, 838, 966, 877, 1232, 967, 1231, 878, 1230, 879, 376, 217, 218, 375, 219, 374, 644, 643, 609, 180, 501, 502, 413, 1392, 109, 503, 448, 1377, 416, 179, 1378, 110, 178, 305, 268, 111, 306, 267, 309, 266, 72, 71, 69");
            lagsHashMap.put("dataSets/1year3months_1aggregate9_extraFeatures.arff", "1, 1148, 1149, 861, 862, 1150, 863, 1056, 1057, 1058, 768, 484, 1254, 469, 470, 1253, 1238, 1344, 767, 1347, 1346, 2, 964, 766, 769, 10, 108, 572, 485, 486, 771, 99, 96, 772, 963, 288, 287, 948, 680, 194, 291, 192, 947, 193, 571, 679, 664, 557, 946, 377, 376, 378, 965, 968, 384, 573, 966, 579, 574, 1144, 375, 109, 180, 374, 1340, 1326, 179, 1325, 110, 1163, 178, 1137, 1138, 681, 72, 877, 1164, 683, 682, 1161, 111, 71, 1036, 878, 70, 879, 1035, 268, 305, 1021, 1232, 308, 307, 1074, 267, 1075, 1073, 266, 1231, 1230, 840, 501, 413, 414, 839, 502, 217, 445, 506, 833, 221, 1269, 222, 697, 1270, 1271, 1379, 1380, 701, 644, 732, 1382, 643, 642");
            lagsHashMap.put("dataSets/1year3months_1aggregate10_extraFeatures.arff", "1, 2, 1341, 863, 861, 860, 1343, 1342, 1340, 768, 769, 672, 673, 671, 1248, 3, 1247, 1246, 1339, 767, 1161, 1145, 573, 770, 766, 1338, 1152, 1149, 771, 1036, 948, 1162, 697, 576, 1073, 1144, 1035, 574, 947, 698, 377, 1056, 384, 1034, 1163, 946, 383, 1074, 960, 478, 699, 1055, 959, 1269, 572, 1054, 191, 1143, 192, 961, 1270, 1075, 190, 681, 1271, 1142, 95, 479, 480, 96, 94, 571, 484, 682, 287, 286, 285, 570, 965, 840, 683, 839, 838, 966, 877, 1232, 967, 1231, 878, 1230, 879, 376, 217, 218, 375, 219, 374, 644, 643, 609, 180, 501, 502, 413, 1392, 109, 503, 448, 1377, 416, 179, 1378, 110, 178, 305, 268, 111, 306, 267, 309, 266, 72, 71, 69");
            lagsHashMap.put("dataSets/1year3months_10aggregate_extraFeatures.arff", "1055, 1054, 1056, 1246, 1247, 1248, 1341, 1354, 1355, 680, 663, 664, 1269, 1381, 1377, 1382, 1270, 1, 1271, 769, 770, 1340, 1073, 771, 1339, 964, 1074, 1338, 573, 960, 963, 288, 287, 289, 1075, 574, 481, 965, 575, 482, 195, 1145, 192, 193, 966, 1146, 1156, 967, 2, 948, 877, 484, 878, 483, 947, 572, 1232, 480, 876, 1161, 946, 768, 864, 865, 1036, 879, 681, 571, 377, 1162, 767, 1231, 1035, 1230, 378, 766, 1163, 570, 379, 1033, 1144, 376, 95, 96, 682, 94, 3, 413, 683, 609, 644, 109, 1143, 414, 375, 180, 610, 1142, 415, 373, 697, 217, 305, 110, 501, 268, 179, 698, 218, 111, 178, 306, 699, 219, 840, 502, 267, 307, 72, 503, 233, 805, 839, 37, 71");
            lagsHashMap.put("dataSets/1year3months_50aggregate_extraFeatures.arff", "1268, 1247, 1233, 1072, 1071, 1051, 1341, 1355, 1376, 1380, 1381, 1377, 680, 679, 678, 1145, 1269, 964, 1159, 1160, 963, 962, 1270, 1304, 1161, 1232, 1073, 1231, 1162, 1230, 1074, 1175, 1340, 484, 1075, 483, 1339, 482, 1338, 465, 500, 479, 877, 1036, 1144, 1035, 573, 1143, 1034, 876, 1142, 965, 878, 875, 874, 574, 879, 587, 966, 967, 769, 572, 948, 770, 571, 947, 570, 783, 768, 840, 946, 767, 839, 805, 766, 697, 304, 698, 303, 269, 681, 699, 682, 377, 683, 378, 379, 609, 181, 644, 643, 195, 193, 376, 501, 375, 1, 374, 108, 502, 107, 503, 106, 413, 305, 448, 414, 306, 307, 180, 2, 109, 179, 217, 268, 178, 110, 267, 218, 3, 111, 266, 219, 72, 37, 71");
            lagsHashMap.put("dataSets/1year3months_100aggregate_extraFeatures.arff", "1366, 1369, 1370, 1262, 1261, 1263, 1066, 1065, 1067, 1174, 1173, 1172, 870, 869, 871, 674, 675, 673, 494, 493, 492, 1334, 1335, 1333, 958, 959, 957, 965, 573, 602, 601, 1226, 1232, 1225, 1161, 994, 769, 993, 1269, 1162, 1190, 770, 797, 1298, 1270, 1073, 1138, 478, 1144, 1139, 479, 1030, 477, 1031, 1036, 1074, 1102, 377, 1377, 1378, 1379, 406, 405, 948, 942, 941, 877, 878, 681, 840, 834, 768, 835, 906, 762, 767, 682, 298, 297, 296, 683, 697, 572, 571, 570, 698, 726, 181, 644, 609, 643, 182, 210, 501, 502, 1, 503, 108, 98, 97, 376, 413, 375, 414, 305, 374, 448, 306, 217, 109, 307, 268, 2, 180, 218, 267, 219, 266, 179, 110, 178, 111, 3, 72, 37, 71");
            lagsHashMap.put("dataSets/1year3months_allaggregate_extraFeatures.arff", "1269, 1304, 1303, 1073, 1108, 1107, 1232, 1231, 1197, 1144, 1161, 1143, 1196, 1142, 1036, 1162, 1035, 1340, 1392, 1377, 1391, 1001, 1339, 1338, 877, 912, 948, 911, 947, 946, 965, 1000, 1341, 1376, 966, 1342, 840, 697, 839, 732, 805, 731, 1268, 1233, 1267, 1145, 1180, 964, 1146, 963, 876, 1072, 962, 1037, 681, 875, 1071, 841, 716, 682, 644, 769, 609, 643, 804, 770, 501, 536, 502, 768, 767, 766, 572, 680, 573, 571, 679, 570, 678, 608, 574, 413, 448, 500, 465, 447, 499, 377, 305, 484, 412, 378, 483, 306, 376, 482, 340, 375, 374, 217, 1, 252, 109, 218, 304, 269, 303, 110, 268, 111, 267, 180, 181, 216, 266, 2, 179, 182, 108, 178, 107, 106, 3, 72, 37, 71");

            String chosenLags = lagsHashMap.get(pathToWholeData);
            if(chosenLags == "" || chosenLags == null){
                System.out.println("File path and lags ranked by relief do not match! Setting default ones");
                chosenLags = "1, 872, 873, 871, 964, 1340, 1233, 1251, 1248, 1337, 1341, 1338, 1344, 1343, 1145, 768, 1144, 672, 1146, 1056, 1147, 1055, 673, 1037, 769, 671, 572, 573, 1143, 2, 1140, 181, 767, 765, 484, 948, 576, 575, 377, 192, 96, 1232, 191, 770, 965, 569, 571, 97, 3, 480, 479, 771, 95, 465, 1036, 1161, 947, 1231, 376, 945, 1229, 378, 288, 476, 379, 287, 286, 966, 1035, 967, 1033, 681, 1162, 375, 1163, 373, 180, 1269, 1073, 877, 682, 840, 1270, 1271, 683, 1074, 179, 1075, 878, 839, 178, 879, 838, 109, 268, 1377, 644, 1378, 1379, 267, 501, 305, 266, 643, 110, 642, 72, 697, 111, 502, 503, 732, 71, 698, 306, 70, 448, 307, 447, 446, 217, 252, 218";
            }
            doForecasting doForecasting = new doForecasting();
            doForecasting.doForecast(wholeData, chosenLags);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
