     /* The idea is that at first we have 2 random subset of features (containing 25 to 100 % of the features included). In each iteration we evaluate the both and, depending on which one delivers the better result we change the worse subset to be more like the better one. The probability of each bit in the subset to be set like the one of the better subset depends on how much big of a improvement the better subset brings. So if the better set is a lot better than the worse set, the worse set will become very simmilar to it. Otherwise the random Factor will play a bigger role and more random mutations (or bits staying the same as before) will happen. This is to avoid getting stuck in local optima and rise the possibity of the worse subset to be better than the better subset in the next iteration. If only very small improvements happen more times in a row it's considered as achieved a stalling point and the best subset is returned*/ 

 int maxStale = 5;
        double staleThreshold = 0.0001;                                         //when improvements are lower than this it's considered stalling
        int i = 1;
         BitSet featureSubset1 = new BitSet(data.numberofFeatures());          //random Bitset containing 25% to 100% of features set to 1, a bitset is a array of bits of which each bit is either set to 0 if the feature should be excluded and 1 if it should be included in the evaluation
            BitSet featureSubset2 = new BitSet(data.numberofFeatures());          //another random BitSet
        while (i < maxStale) {
            double eval1 = wrapper.evaluate(featureSubset1);                           //get evaluation of feature Subsets in RMSE
            double eval2 = wrapper.evaluate(featureSubset2);
            if (eval1<eval2) {                                               //featureSet1 is better than 2
                double improvementMeasure = eval1 - eval2;              //will deliver RMSE let's say between 0.1 and 2
                improvementMeasure = sigmoidFunction(improvementMeasure);   //will normalize the improvementMeasure to be between 0 and 1, the smaller the better
                BitSet tempBitSet = new BitSet(data.numberofFeatures());
                for (int j = 0; j < featureSubset2.size(); j++) {
                    Random random = new Random(0.5, 1);                              //random Number between 0.5 and 1
                    double changeBit = random - improvementMeasure;                 //the better the RMSE (the lower it is) the more likely the bit will be changed. This balance between random and improvement will be further fine tuned. Aim of this is to not just make a set like the better one but introduce mutations to get out of local optima
                    if (changeBit >= 0) {
                        tempBitSet.set(i, featureSubset1.get(i));             //bit will be set like the one of the better set
                    } else {                                                         //bit will be set to have a random mutation if random >0.85, else it will be same as worse set (set2 here). This is just a example number, will still need to think this through
                        if (random > 0.85) {
                            tempBitSet.set(i, 1);
                        } else {
                            tempBitSet.set(i, featureSubset2.get(i));
                        }
                    }
                    eval2 = wrapper.evaluate(tempBitSet);
                    if (eval2 - eval1 > staleThreshold) {
                        featureSubset2 = tempBitSet;
                        i=0;
                    } else {                         //if improvement is too small consider it as stalling
                        i++;
                    }
                }
            }else{
                    //analog code as above for when featureSet2 is better than 1
                }
        }
        double eval1 = wrapper.evaluate(featureSubset1);                          
         double eval2 = wrapper.evaluate(featureSubset2);
         if(eval1<eval2){
             featureSubset1;
         }else {
            return featureSubset2;
         }

